
---------------------------------------------------------------------------
----------- «÷«›… ⁄„·Ì«  «·Ï «·„” Êœ⁄ »«” Œœ«„-----------------------------

- $ git add  
      #for adding file form working directory to the staging index
	 #Example for using it
	  $ git add index.html              #Move it to Staging index
	  $ git rm --cached index.html      #ignor Moving file to staging
	  $ git add css/app.css js/app.js   #Move To files 
	  $ git .                           #this Move all Files to Staging 
	  $ git add pages/*                 #Move all file in Folder pages
      $ git add pages/.                 #same job for : git add pages/* 
    -----------------------------------------------------------------------
- $ git commit 
       #for Moving files from staging index into repository and save them there
       #when you do it ,will appare your edior to see the file that changed last
	   #.. So You will  Adding Name for your Chage or date just to know it later
	   #.. then save file and close all editor to save the change in git
	   # Important  to use 'git add .' befor update
	   
- $ git commit -m "Initial commit" 
	   #if you don't need to open Edito and wite and save and close just 
 	   #...Do like this  $ git commit -m "MyPoint33AfterAddJs"
	   # Important  to use 'git add .' befor update

- $ git commit -a
       # this when you update file and don't need to use  git add  for file again
	   #  Not Important  to use 'git add .' befor update
	  

	-----------------------------------------------------------------------------------
	
	
- $ git log   # it show history of all uodating of project
    
	$ git log --oneline          # get the name onlay of all Last Keek change 
	$ git log 10ea3fe --oneline  # git all commit from First to this commit
	$ git log -p fdf5493         # For Select one Sh you keep it SH					   
	$ git log -s                 # show  commit , Author , Date And Name of Comment For All 
	
	$ git log -p           # how history update with deatial and what you add to file 
	                       #..And Content of file 					   
	$ git log --stat       # show history with number of add or delete file 
	                       #...also number of lines  (add  or delete )
	
	$ git log -p --stat    # Result both of obove comand 
  
      j √Ê ? ··«‰ ﬁ«· ··√”›· „ﬁœ«— ”ÿ— Ê«Õœ ›Ì ﬂ· „—…
      d ··«‰ ﬁ«· „ﬁœ«— ‰’› ’›Õ… „‰ «·‘«‘…
      f ··«‰ ﬁ«· „ﬁœ«— ’›Õ… ﬂ«„·… „‰ «·‘«‘… ·· „—Ì— ·√⁄·Ï° «÷€ÿ ⁄·Ï   
	  k √Ê ? ··«‰ ﬁ«· ··√⁄·Ï „ﬁœ«— ”ÿ— Ê«Õœ ›Ì ﬂ· „—…
      u ··«‰ ﬁ«· „ﬁœ«— ‰’› ’›Õ… „‰ «·‘«‘…
      b ··«‰ ﬁ«· „ﬁœ«— ’›Õ… ﬂ«„·… „‰ «·‘«‘…
      «÷€ÿ ⁄·Ï q „‰ √Ã· «·Œ—ÊÃ „‰ «·”Ã· («·—ÃÊ⁄ ≈·Ï „ÊÃÂ «·√Ê«„— «·«⁄ Ì«œÌ)
	-------------------------------------------------------------------------------
	$ git show         # return last Commit Added to Git
	$ git show fdf5493 # Retuen  the specifa Sha that we add to it
	-------------------------------------------------------
- $ git diff 
    # when we make any change befor commit show us tow line "-" old line "+" new line
    # so it,s show both old new new thing that we updated in any documents
    # Seems git log -p
	
	------------------------------------------
- .gitignore 
    # create New File with .gitignore and include all file that
	#.. we don't want them to apear in git status or projwct	
	
	# · Ã«Â· «·’Ê— „‰  Ê⁄ »Ì «‰ ÃÌ ‰ﬂ » ›Ì «·„·›  *.png	  
	##Ì„ﬂ‰ «” Œœ«„ «·”ÿÊ— «·Œ«·Ì… ·⁄„· „”«›« 
    # - Ì„Ì“ «·”ÿ— ﬂ ⁄·Ìﬁ
    * - Ìÿ«»ﬁ 0 √Ê «·„“Ìœ „‰ «·Õ—Ê›
    ? - Ìÿ«»ﬁ Õ—›« Ê«Õœ«
    [abc] - Ìÿ«»ﬁ a √Ê b √Ê √Ê c
    ** - Ìÿ«»ﬁ «·√œ·… «·„ œ«Œ·… - „ ÿ«»ﬁ«  a/**/z
   a/z
   a/b/z
   a/b/c/z

   ·–« ≈–« ﬂ«‰  «·‹ 50 ’Ê—… »√ﬂ„·Â« ÂÌ
   ’Ê— JPEG ›Ì „Ã·œ \"«·⁄Ì‰« \"°
  ›Ì„ﬂ‰‰« ≈÷«›… «·”ÿ— «· «·Ì ≈·Ï 
  .gitignore
  ·Ã⁄· Git Ì Ã«Â· «·‹ 50 ’Ê—… »√ﬂ„·Â«.
   ‰”Œœ„ «·«„— «”›· „»«‘—Â
  img/*.jpg
  
--------------------------------------------------------------
--------------------------------------------------------------
  $ Git Tag  -a    # to add some note ber numver of commit
                   #.. addafter -a shotcut tag
  $ git log --decorate      # to show the tag
  $ git tag -d v1.0          # to remove tag with name v1.0
  $ git tag -a v1.0 a87984    # add tag to old Byusgin SHA 

------------------------------------------------------------
-----------------------------------------------------------
 $ git branch            # show all previous branch for projects
 $ git branch branch1    # ceate new Branch or called branch1  for projects
 $ git checkout sidebar  # change head to branch sidebar
 $ git branch -d sidebar # remove Brach called  sidebar after you turn to other
 $ git branch -D sidebar # remove Brach called  sidebar Even you use it  or have some commit
 $ git branch alt-sidebar-loc 42a69f
                         # create Branch called alt-sidebar-loc
						 #..and have point to 42a69f commit

--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------
 
 $ git log --oneline --decorate --graph --all  # Show All Update From All Branch
 $ git merge footer   # that will megge footer branch to Main branch that 
                      #.. we are in it working  also footer will saty as last

 $ git reset --hard HEAD^  # to Undo Merge that you Do Aslo Do more one step
                           #.. delete commit in ordered one after one
	git reset #have 3 parmeters 
	1- git reset --mixed HEAD~1 OR  git reset HEAD~1  #take head to working Directory
	2- git reset --soft HEAD~1    ##take head to staging index
	3- git reset --hard HEAD~1    ##take head to Trach
						   
						   
 $ git commit --amend      # alter the most-recent commit
 $ git revert  ac3f78     # delete things that done in this commit
 
 if we have this commit is : 9ec05ca  and the head refer to it then se call them as 
	- HEAD^     or   HEAD~1   or  HEAD~      #call     father   to commit 9ec05ca
	- HEAD^^    or   HEAD~2   or             #call grandfather  to  commit 9ec05ca 
    - HEAD^^^   or   HEAD~3   or             #call father of grandfather to  9ec05ca   
    --------------------------------------------------------------------------------
	# Deferent between  ^  and  ~   So  deference appear when we make merege will hapend
	 -  ⁄‰œ «‰‘«¡  À»Ì  „‰ «·œ„⁄  ÌﬂÊ‰ ·· À»Ì  «·ÃœÌœ Ê«·œ«‰ «Ê «»ÊÌ‰
     1- ^    ··≈‘«—… «·Ï «·√» «·«Ê· «·Œ«’ »«· À»Ì 
	 2- ^2   Ì‘Ì— «·Ï «·„—Ã⁄ «·Ï «·√» «·À«‰Ì 
	 
	 - «·√» «·«Ê· ÂÊ «·›—⁄ «·–Ì ﬂ‰  ›ÌÂ ⁄‰œ ⁄„· «·«„—  ﬁÌ  „Ì—Ã
	 - «·√» «·À««‰Ì  ÂÊ Ì⁄ »— «·›———⁄ «·„œ„Ã
	 
	 # ⁄‰œ Õ”«» «· À»Ì «   ‰·«ÕŸ «· «·Ì
	 - ·« Õ ”» «· À»Ì« «  «·–Ì Ã—  ›Ì «·›—Ê⁄ «·«Œ—Ï ﬁ»· «·œ„Ã -„ÿ»ﬁ
	 1- ·«ÌÕ ”» «· Revert
	 2- ·« Ì Õ”» «·  Merge 
	 
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------	

   - git remote  # manage remote repository
   - git push    # send updates to remote
   - git pull    # retrieve updates from remote

    # Create connect with my remote project by this line after you create  "new-git-project-1"
     $ git remote add origin https://github.com/yahiaalnaqeeb/new-git-project-1.git
    
	# to check connection we use blew line
	$ git remote -v














  
  
  
	
-------------------------------------------------------------
-------------------------------------------------------------



-------------------------------------------------------------
-------------------------------- Other Note -----------------

$ git rm
usage: git rm [<options>] [--] <file>...

    -n, --dry-run         dry run
    -q, --quiet           do not list removed files
    --cached              only remove from the index
    -f, --force           override the up-to-date check
    -r                    allow recursive removal
    --ignore-unmatch      exit with a zero status even if nothing matched

	